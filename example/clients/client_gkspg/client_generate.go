// Code generated by "tools"; DO NOT EDIT

package client_gkspg

import (
	"github.com/m2c/kiplestar/commons/httptool"
)

//
type ClientGkspg struct {
	httptool.Client
}

// complete
func (c ClientGkspg) PaymentWebV10RefundComplete(req PaymentWebV10RefundCompleteRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/refund/complete", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Excel
func (c ClientGkspg) PaymentWebV10RefundExcel(req PaymentWebV10RefundExcelRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("POST", "/payment/web/v1.0/refund/excel", req, headers...)
	return
}

// excel
func (c ClientGkspg) PaymentWebV10TopupExcel(req PaymentWebV10TopupExcelRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("POST", "/payment/web/v1.0/topup/excel", req, headers...)
	return
}

// Merchant
func (c ClientGkspg) PaymentWebV10TopupMerchant(req PaymentWebV10TopupMerchantRequest, headers ...map[string]string) (resp []byte, err error) {
	resp = []byte{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/topup/merchant", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// topup
func (c ClientGkspg) PaymentApiV10TopupCc(req PaymentApiV10TopupCcRequest, headers ...map[string]string) (resp CcTopUpRsp, err error) {
	resp = CcTopUpRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/topup/cc", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Channel-Stat
func (c ClientGkspg) PaymentWebV10ChannelStatIndex(req PaymentWebV10ChannelStatIndexRequest, headers ...map[string]string) (resp ChannelRecordStatListRsp, err error) {
	resp = ChannelRecordStatListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/channel/stat/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// merchant wallet info
func (c ClientGkspg) PaymentWebV10MerchantWalletInfo(req PaymentWebV10MerchantWalletInfoRequest, headers ...map[string]string) (resp MerchantWalletInfoRsp, err error) {
	resp = MerchantWalletInfoRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/merchant/wallet/info", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// excel
func (c ClientGkspg) PaymentWebV10PaymentExcel(req PaymentWebV10PaymentExcelRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("POST", "/payment/web/v1.0/payment/excel", req, headers...)
	return
}

// index
func (c ClientGkspg) PaymentWebV10TopupIndex(req PaymentWebV10TopupIndexRequest, headers ...map[string]string) (resp TopUpIndexRsp, err error) {
	resp = TopUpIndexRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/topup/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Card-List
func (c ClientGkspg) PaymentApiV10CardList(req PaymentApiV10CardListRequest, headers ...map[string]string) (resp CcCardListRsp, err error) {
	resp = CcCardListRsp{}
	var rs []byte
	rs, err = c.Request("GET", "/payment/api/v1.0/card/list", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// apply
func (c ClientGkspg) PaymentApiV10RefundApply(req PaymentApiV10RefundApplyRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/refund/apply", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// index
func (c ClientGkspg) PaymentWebV10RefundIndex(req PaymentWebV10RefundIndexRequest, headers ...map[string]string) (resp RefundListRsp, err error) {
	resp = RefundListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/refund/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// refundSummary
func (c ClientGkspg) PaymentWebV10RefundSummaryDownload(req PaymentWebV10RefundSummaryDownloadRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/refund/summary/download", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// List
func (c ClientGkspg) PaymentApiV10TransactionIndex(req PaymentApiV10TransactionIndexRequest, headers ...map[string]string) (resp TransactionListRsp, err error) {
	resp = TransactionListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/transaction/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// apply
func (c ClientGkspg) PaymentWebV10RefundApply(req PaymentWebV10RefundApplyRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/refund/apply", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// audit
func (c ClientGkspg) PaymentWebV10RefundAudit(req PaymentWebV10RefundAuditRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/refund/audit", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// index
func (c ClientGkspg) PaymentWebV10PaymentIndex(req PaymentWebV10PaymentIndexRequest, headers ...map[string]string) (resp PaymentIndexRsp, err error) {
	resp = PaymentIndexRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/payment/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// index
func (c ClientGkspg) PaymentWebV10WithdrawalIndex(req PaymentWebV10WithdrawalIndexRequest, headers ...map[string]string) (resp WithdrawalListRsp, err error) {
	resp = WithdrawalListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/withdrawal/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Delete-Card
func (c ClientGkspg) PaymentApiV10CardDelete(req PaymentApiV10CardDeleteRequest, headers ...map[string]string) (resp []byte, err error) {
	resp = []byte{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/card/delete", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// void
func (c ClientGkspg) PaymentApiV10RefundVoid(req PaymentApiV10RefundVoidRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/refund/void", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// topup
func (c ClientGkspg) PaymentApiV10TopupFpx(req PaymentApiV10TopupFpxRequest, headers ...map[string]string) (resp FpxTopUpRsp, err error) {
	resp = FpxTopUpRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/topup/fpx", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// apply
func (c ClientGkspg) PaymentApiV10WithdrawalApply(req PaymentApiV10WithdrawalApplyRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("POST", "/payment/api/v1.0/withdrawal/apply", req, headers...)
	return
}

// Offline deposit Audit
func (c ClientGkspg) PaymentWebV10OfflineDepositAudit(req PaymentWebV10OfflineDepositAuditRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/offline-deposit/audit", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Offline deposit Index
func (c ClientGkspg) PaymentWebV10OfflineDepositIndex(req PaymentWebV10OfflineDepositIndexRequest, headers ...map[string]string) (resp OfflineDepositListRsp, err error) {
	resp = OfflineDepositListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/offline-deposit/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// List
func (c ClientGkspg) PaymentWebV10TransactionIndex(req PaymentWebV10TransactionIndexRequest, headers ...map[string]string) (resp TransactionListRsp, err error) {
	resp = TransactionListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/transaction/index", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// audit
func (c ClientGkspg) PaymentWebV10WithdrawalAudit(req PaymentWebV10WithdrawalAuditRequest, headers ...map[string]string) (resp []byte, err error) {
	resp = []byte{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/withdrawal/audit", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Add-Card
func (c ClientGkspg) PaymentApiV10CardAdd(req PaymentApiV10CardAddRequest, headers ...map[string]string) (resp CcAddCardRsp, err error) {
	resp = CcAddCardRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/card/add", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Merchant Prefund
func (c ClientGkspg) PaymentWebV10MerchantPrefund(req PaymentWebV10MerchantPrefundRequest, headers ...map[string]string) (resp PrefundResponse, err error) {
	resp = PrefundResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/merchant/prefund", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// prefund records history
func (c ClientGkspg) PaymentWebV10MerchantPrefundHistory(req PaymentWebV10MerchantPrefundHistoryRequest, headers ...map[string]string) (resp GetPrefundRecordsRsp, err error) {
	resp = GetPrefundRecordsRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/merchant/prefund-history", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Merchants User Revert
func (c ClientGkspg) PaymentWebV10MerchantRevert(req PaymentWebV10MerchantRevertRequest, headers ...map[string]string) (resp BaseResponseHeader, err error) {
	resp = BaseResponseHeader{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/merchant/revert", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// wallet
func (c ClientGkspg) PaymentApiV10PaymentWallet(req PaymentApiV10PaymentWalletRequest, headers ...map[string]string) (resp WalletPaymentRsp, err error) {
	resp = WalletPaymentRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/payment/wallet", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// GetChannel-Statistics-Yesterday
func (c ClientGkspg) PaymentInnerV10CronChannelStatisticsYesterday(req PaymentInnerV10CronChannelStatisticsYesterdayRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("GET", "/payment/inner/v1.0/cron/channel/statistics-yesterday", req, headers...)
	return
}

// Manual
func (c ClientGkspg) PaymentWebV10TopupManual(req PaymentWebV10TopupManualRequest, headers ...map[string]string) (resp []byte, err error) {
	resp = []byte{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/topup/manual", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// topUp-trace-order
func (c ClientGkspg) PaymentInnerV10CronTopupTraceOrders(req PaymentInnerV10CronTopupTraceOrdersRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("GET", "/payment/inner/v1.0/cron/topup/trace-orders", req, headers...)
	return
}

// Excel
func (c ClientGkspg) PaymentWebV10TransactionExcel(req PaymentWebV10TransactionExcelRequest, headers ...map[string]string) (err error) {
	_, err = c.Request("POST", "/payment/web/v1.0/transaction/excel", req, headers...)
	return
}

// Exception-List
func (c ClientGkspg) PaymentWebV10TransactionExceptionList(req PaymentWebV10TransactionExceptionListRequest, headers ...map[string]string) (resp TransactionExceptionListRsp, err error) {
	resp = TransactionExceptionListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/transaction/exception/list", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Excel
func (c ClientGkspg) PaymentWebV10WithdrawalExcel(req PaymentWebV10WithdrawalExcelRequest, headers ...map[string]string) (resp WithdrawalListRsp, err error) {
	resp = WithdrawalListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/withdrawal/excel", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Info
func (c ClientGkspg) PaymentWebV10RefundInfo(req PaymentWebV10RefundInfoRequest, headers ...map[string]string) (resp RefundInfoRsp, err error) {
	resp = RefundInfoRsp{}
	var rs []byte
	rs, err = c.Request("GET", "/payment/web/v1.0/refund/info", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// transfer
func (c ClientGkspg) PaymentApiV10TransferTransfer(req PaymentApiV10TransferTransferRequest, headers ...map[string]string) (resp []byte, err error) {
	resp = []byte{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/api/v1.0/transfer/transfer", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Channel-Items
func (c ClientGkspg) PaymentWebV10ChannelItems(req PaymentWebV10ChannelItemsRequest, headers ...map[string]string) (resp MerchantPayChannelListRsp, err error) {
	resp = MerchantPayChannelListRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/channel/items", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Prefund detail
func (c ClientGkspg) PaymentWebV10MerchantPrefundDetail(req PaymentWebV10MerchantPrefundDetailRequest, headers ...map[string]string) (resp GetPrefundDetailRsp, err error) {
	resp = GetPrefundDetailRsp{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/merchant/prefund-detail", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}

// Offline deposit Apply
func (c ClientGkspg) PaymentWebV10OfflineDepositApply(req PaymentWebV10OfflineDepositApplyRequest, headers ...map[string]string) (resp BaseResponse, err error) {
	resp = BaseResponse{}
	var rs []byte
	rs, err = c.Request("POST", "/payment/web/v1.0/offline-deposit/apply", req, headers...)
	if err != nil {
		return
	}
	err = c.ParseToResult(rs, &resp)
	return
}
