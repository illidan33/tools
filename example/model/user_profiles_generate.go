// Code generated by "tools gen method"; DO NOT EDIT

package model_test

import (
	"github.com/jinzhu/gorm"
)

func (userProfiles *UserProfiles) FetchByUuid(db *gorm.DB) error {
	if err := db.Where("uuid=?", userProfiles.Uuid).First(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByUuidWithStruct(db *gorm.DB) error {
	if err := db.Model(userProfiles).Where("uuid=?", userProfiles.Uuid).Updates(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByUuidWithMap(db *gorm.DB, args map[string]interface{}) error {
	if err := db.Model(userProfiles).Where("uuid=?", userProfiles.Uuid).Updates(args).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) BatchFetchByUuid(db *gorm.DB) (userProfilesList []UserProfiles, err error) {
	err = db.Where("uuid=?", userProfiles.Uuid).Find(&userProfilesList).Error
	return
}

func (userProfiles *UserProfiles) BatchFetchByUuidList(db *gorm.DB, uuidList []string) (userProfilesList []UserProfiles, err error) {
	err = db.Where("uuid in (?)", uuidList).Find(&userProfilesList).Error
	return
}

func (userProfiles *UserProfiles) FetchByPhoto(db *gorm.DB) error {
	if err := db.Where("photo=?", userProfiles.Photo).First(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByPhotoWithStruct(db *gorm.DB) error {
	if err := db.Model(userProfiles).Where("photo=?", userProfiles.Photo).Updates(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByPhotoWithMap(db *gorm.DB, args map[string]interface{}) error {
	if err := db.Model(userProfiles).Where("photo=?", userProfiles.Photo).Updates(args).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) BatchFetchByPhoto(db *gorm.DB) (userProfilesList []UserProfiles, err error) {
	err = db.Where("photo=?", userProfiles.Photo).Find(&userProfilesList).Error
	return
}

func (userProfiles *UserProfiles) FetchByUserProfileId(db *gorm.DB) error {
	if err := db.Where("user_profile_id=?", userProfiles.UserProfileId).First(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByUserProfileIdWithStruct(db *gorm.DB) error {
	if err := db.Model(userProfiles).Where("user_profile_id=?", userProfiles.UserProfileId).Updates(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) UpdateByUserProfileIdWithMap(db *gorm.DB, args map[string]interface{}) error {
	if err := db.Model(userProfiles).Where("user_profile_id=?", userProfiles.UserProfileId).Updates(args).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) BatchFetchByUserProfileId(db *gorm.DB) (userProfilesList []UserProfiles, err error) {
	err = db.Where("user_profile_id=?", userProfiles.UserProfileId).Find(&userProfilesList).Error
	return
}

func (userProfiles *UserProfiles) Create(db *gorm.DB) error {
	if err := db.Create(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) Delete(db *gorm.DB) error {
	if err := db.Delete(userProfiles).Error; err != nil {
		return err
	}
	return nil
}

func (userProfiles *UserProfiles) FetchList(db *gorm.DB, size int32, offset int32, args map[string]interface{}) (userProfilesList []UserProfiles, count int32, err error) {
	if size == -1 {
		err = db.Where(args).Offset(offset).Find(&userProfilesList).Count(&count).Error
	} else {
		err = db.Where(args).Offset(offset).Limit(size).Find(&userProfilesList).Count(&count).Error
	}
	return
}
